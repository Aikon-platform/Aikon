# Generated by Django 4.0.4 on 2023-07-12 14:08

import app.webapp.models.digitization
import app.webapp.utils.iiif.validation
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import functools


def populate_languages(apps, schema_editor):
    languages = [
        {"code": "aa", "lang": "Afar"},
        {"code": "ab", "lang": "Abkhazian"},
        {"code": "ae", "lang": "Avestan"},
        {"code": "af", "lang": "Afrikaans"},
        {"code": "ak", "lang": "Akan"},
        {"code": "am", "lang": "Amharic"},
        {"code": "an", "lang": "Aragonese"},
        {"code": "ar", "lang": "Arabic"},
        {"code": "as", "lang": "Assamese"},
        {"code": "av", "lang": "Avaric"},
        {"code": "ay", "lang": "Aymara"},
        {"code": "az", "lang": "Azerbaijani"},
        {"code": "ba", "lang": "Bashkir"},
        {"code": "be", "lang": "Belarusian"},
        {"code": "bg", "lang": "Bulgarian"},
        {"code": "bh", "lang": "Bihari languages"},
        {"code": "bi", "lang": "Bislama"},
        {"code": "bm", "lang": "Bambara"},
        {"code": "bn", "lang": "Bengali"},
        {"code": "bo", "lang": "Tibetan"},
        {"code": "br", "lang": "Breton"},
        {"code": "bs", "lang": "Bosnian"},
        {"code": "ca", "lang": "Catalan; Valencian"},
        {"code": "ce", "lang": "Chechen"},
        {"code": "ch", "lang": "Chamorro"},
        {"code": "co", "lang": "Corsican"},
        {"code": "cr", "lang": "Cree"},
        {"code": "cs", "lang": "Czech"},
        {"code": "cv", "lang": "Chuvash"},
        {"code": "cy", "lang": "Welsh"},
        {"code": "da", "lang": "Danish"},
        {"code": "de", "lang": "German"},
        {"code": "dv", "lang": "Divehi; Dhivehi; Maldivian"},
        {"code": "dz", "lang": "Dzongkha"},
        {"code": "ee", "lang": "Ewe"},
        {"code": "el", "lang": "Greek, Modern (1453-)"},
        {"code": "en", "lang": "English"},
        {"code": "eo", "lang": "Esperanto"},
        {"code": "es", "lang": "Spanish; Castilian"},
        {"code": "et", "lang": "Estonian"},
        {"code": "eu", "lang": "Basque"},
        {"code": "fa", "lang": "Persian"},
        {"code": "ff", "lang": "Fulah"},
        {"code": "fi", "lang": "Finnish"},
        {"code": "fj", "lang": "Fijian"},
        {"code": "fo", "lang": "Faroese"},
        {"code": "fr", "lang": "French"},
        {"code": "fy", "lang": "Western Frisian"},
        {"code": "ga", "lang": "Irish"},
        {"code": "gd", "lang": "Gaelic; Scomttish Gaelic"},
        {"code": "gl", "lang": "Galician"},
        {"code": "gn", "lang": "Guarani"},
        {"code": "gu", "lang": "Gujarati"},
        {"code": "gv", "lang": "Manx"},
        {"code": "ha", "lang": "Hausa"},
        {"code": "he", "lang": "Hebrew"},
        {"code": "hi", "lang": "Hindi"},
        {"code": "ho", "lang": "Hiri Motu"},
        {"code": "hr", "lang": "Croatian"},
        {"code": "ht", "lang": "Haitian; Haitian Creole"},
        {"code": "hu", "lang": "Hungarian"},
        {"code": "hy", "lang": "Armenian"},
        {"code": "hz", "lang": "Herero"},
        {"code": "id", "lang": "Indonesian"},
        {"code": "ie", "lang": "Interlingue; Occidental"},
        {"code": "ig", "lang": "Igbo"},
        {"code": "ii", "lang": "Sichuan Yi; Nuosu"},
        {"code": "ik", "lang": "Inupiaq"},
        {"code": "io", "lang": "Ido"},
        {"code": "is", "lang": "Icelandic"},
        {"code": "it", "lang": "Italian"},
        {"code": "iu", "lang": "Inuktitut"},
        {"code": "ja", "lang": "Japanese"},
        {"code": "jv", "lang": "Javanese"},
        {"code": "ka", "lang": "Georgian"},
        {"code": "kg", "lang": "Kongo"},
        {"code": "ki", "lang": "Kikuyu; Gikuyu"},
        {"code": "kj", "lang": "Kuanyama; Kwanyama"},
        {"code": "kk", "lang": "Kazakh"},
        {"code": "kl", "lang": "Kalaallisut; Greenlandic"},
        {"code": "km", "lang": "Central Khmer"},
        {"code": "kn", "lang": "Kannada"},
        {"code": "ko", "lang": "Korean"},
        {"code": "kr", "lang": "Kanuri"},
        {"code": "ks", "lang": "Kashmiri"},
        {"code": "ku", "lang": "Kurdish"},
        {"code": "kv", "lang": "Komi"},
        {"code": "kw", "lang": "Cornish"},
        {"code": "ky", "lang": "Kirghiz; Kyrgyz"},
        {"code": "la", "lang": "Latin"},
        {"code": "lb", "lang": "Luxembourgish; Letzeburgesch"},
        {"code": "lg", "lang": "Ganda"},
        {"code": "li", "lang": "Limburgan; Limburger; Limburgish"},
        {"code": "ln", "lang": "Lingala"},
        {"code": "lo", "lang": "Lao"},
        {"code": "lt", "lang": "Lithuanian"},
        {"code": "lu", "lang": "Luba-Katanga"},
        {"code": "lv", "lang": "Latvian"},
        {"code": "mg", "lang": "Malagasy"},
        {"code": "mh", "lang": "Marshallese"},
        {"code": "mi", "lang": "Maori"},
        {"code": "mk", "lang": "Macedonian"},
        {"code": "ml", "lang": "Malayalam"},
        {"code": "mn", "lang": "Mongolian"},
        {"code": "mr", "lang": "Marathi"},
        {"code": "ms", "lang": "Malay"},
        {"code": "mt", "lang": "Maltese"},
        {"code": "my", "lang": "Burmese"},
        {"code": "na", "lang": "Nauru"},
        {"code": "nd", "lang": "Ndebele, North; North Ndebele"},
        {"code": "ne", "lang": "Nepali"},
        {"code": "ng", "lang": "Ndonga"},
        {"code": "nl", "lang": "Dutch; Flemish"},
        {"code": "nn", "lang": "Norwegian Nynorsk; Nynorsk, Norwegian"},
        {"code": "no", "lang": "Norwegian"},
        {"code": "nr", "lang": "Ndebele, South; South Ndebele"},
        {"code": "nv", "lang": "Navajo; Navaho"},
        {"code": "ny", "lang": "Chichewa; Chewa; Nyanja"},
        {"code": "oc", "lang": "Occitan (post 1500)"},
        {"code": "oj", "lang": "Ojibwa"},
        {"code": "om", "lang": "Oromo"},
        {"code": "or", "lang": "Oriya"},
        {"code": "os", "lang": "Ossetian; Ossetic"},
        {"code": "pa", "lang": "Panjabi; Punjabi"},
        {"code": "pi", "lang": "Pali"},
        {"code": "pl", "lang": "Polish"},
        {"code": "ps", "lang": "Pushto; Pashto"},
        {"code": "pt", "lang": "Portuguese"},
        {"code": "qu", "lang": "Quechua"},
        {"code": "rm", "lang": "Romansh"},
        {"code": "rn", "lang": "Rundi"},
        {"code": "ro", "lang": "Romanian; Moldavian; Moldovan"},
        {"code": "ru", "lang": "Russian"},
        {"code": "rw", "lang": "Kinyarwanda"},
        {"code": "sa", "lang": "Sanskrit"},
        {"code": "sc", "lang": "Sardinian"},
        {"code": "sd", "lang": "Sindhi"},
        {"code": "se", "lang": "Northern Sami"},
        {"code": "sg", "lang": "Sango"},
        {"code": "si", "lang": "Sinhala; Sinhalese"},
        {"code": "sk", "lang": "Slovak"},
        {"code": "sl", "lang": "Slovenian"},
        {"code": "sm", "lang": "Samoan"},
        {"code": "sn", "lang": "Shona"},
        {"code": "so", "lang": "Somali"},
        {"code": "sq", "lang": "Albanian"},
        {"code": "sr", "lang": "Serbian"},
        {"code": "ss", "lang": "Swati"},
        {"code": "st", "lang": "Sotho, Southern"},
        {"code": "su", "lang": "Sundanese"},
        {"code": "sv", "lang": "Swedish"},
        {"code": "sw", "lang": "Swahili"},
        {"code": "ta", "lang": "Tamil"},
        {"code": "te", "lang": "Telugu"},
        {"code": "tg", "lang": "Tajik"},
        {"code": "th", "lang": "Thai"},
        {"code": "ti", "lang": "Tigrinya"},
        {"code": "tk", "lang": "Turkmen"},
        {"code": "tl", "lang": "Tagalog"},
        {"code": "tn", "lang": "Tswana"},
        {"code": "to", "lang": "Tonga (Tonga Islands)"},
        {"code": "tr", "lang": "Turkish"},
        {"code": "ts", "lang": "Tsonga"},
        {"code": "tt", "lang": "Tatar"},
        {"code": "tw", "lang": "Twi"},
        {"code": "ty", "lang": "Tahitian"},
        {"code": "ug", "lang": "Uighur; Uyghur"},
        {"code": "uk", "lang": "Ukrainian"},
        {"code": "ur", "lang": "Urdu"},
        {"code": "uz", "lang": "Uzbek"},
        {"code": "ve", "lang": "Venda"},
        {"code": "vi", "lang": "Vietnamese"},
        {"code": "vo", "lang": "Volap√ºk"},
        {"code": "wa", "lang": "Walloon"},
        {"code": "wo", "lang": "Wolof"},
        {"code": "xh", "lang": "Xhosa"},
        {"code": "yi", "lang": "Yiddish"},
        {"code": "yo", "lang": "Yoruba"},
        {"code": "za", "lang": "Zhuang; Chuang"},
        {"code": "zh", "lang": "Chinese"},
        {"code": "zu", "lang": "Zulu"},
    ]
    for language in languages:
        apps.get_model("webapp", "Language").objects.create(
            lang=language["lang"], code=language["code"]
        )

    # TODO: create ontology for the Tag class


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ConservationPlace",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=200, unique=True, verbose_name="Conservation place"
                    ),
                ),
            ],
            options={
                "verbose_name": "Conservation place",
                "verbose_name_plural": "Conservation place",
            },
        ),
        migrations.CreateModel(
            name="Content",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_min",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Minimum date"
                    ),
                ),
                (
                    "date_max",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Maximum date"
                    ),
                ),
                (
                    "page_min",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="From page/folio"
                    ),
                ),
                (
                    "page_max",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="To page/folio"
                    ),
                ),
            ],
            options={
                "verbose_name": "Content",
                "verbose_name_plural": "Content",
            },
        ),
        migrations.CreateModel(
            name="Edition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name without historical value, useful to distinguish several editions sharing date and place of publication",
                        max_length=500,
                        unique=True,
                        verbose_name="Name",
                    ),
                ),
            ],
            options={
                "verbose_name": "Edition",
                "verbose_name_plural": "Edition",
            },
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "lang",
                    models.CharField(
                        max_length=200, unique=True, verbose_name="Language"
                    ),
                ),
                (
                    "code",
                    models.CharField(max_length=200, unique=True, verbose_name="Code"),
                ),
            ],
            options={
                "verbose_name": "Language",
                "verbose_name_plural": "Language",
            },
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=200, unique=True, verbose_name="Name"),
                ),
                (
                    "date_min",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Minimum date"
                    ),
                ),
                (
                    "date_max",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Maximum date"
                    ),
                ),
            ],
            options={
                "verbose_name": "Historical actor",
                "verbose_name_plural": "Historical actor",
            },
        ),
        migrations.CreateModel(
            name="Place",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=200, unique=True, verbose_name="Name"),
                ),
                ("country", models.CharField(max_length=150, verbose_name="Country")),
                (
                    "latitude",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=8,
                        null=True,
                        verbose_name="Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=8,
                        null=True,
                        verbose_name="Longitude",
                    ),
                ),
            ],
            options={
                "verbose_name": "Place",
                "verbose_name_plural": "Place",
            },
        ),
        migrations.CreateModel(
            name="Series",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notes",
                    models.CharField(
                        max_length=500, unique=True, verbose_name="Additional notes"
                    ),
                ),
                (
                    "date_min",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Minimum date"
                    ),
                ),
                (
                    "date_max",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Maximum date"
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Les informations seront accessibles aux autres utilisateurs de la base.",
                        verbose_name="Make it public",
                    ),
                ),
                (
                    "edition",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.edition",
                        verbose_name="Edition",
                    ),
                ),
            ],
            options={
                "verbose_name": "Series",
                "verbose_name_plural": "Series",
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("label", models.CharField(max_length=50)),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tag",
            },
        ),
        migrations.CreateModel(
            name="Volume",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=150, unique=True, verbose_name="Title"),
                ),
                (
                    "number",
                    models.IntegerField(
                        blank=True,
                        help_text="Number useful for classifying the different volumes of an edition, but not necessarily of historical value",
                        null=True,
                        verbose_name="Volume number",
                    ),
                ),
                (
                    "edition",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.edition",
                        verbose_name="Edition",
                    ),
                ),
            ],
            options={
                "verbose_name": "Volume",
                "verbose_name_plural": "Volume",
            },
        ),
        migrations.CreateModel(
            name="Work",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=600, unique=True, verbose_name="Title"),
                ),
                (
                    "date_min",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Minimum date"
                    ),
                ),
                (
                    "date_max",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Maximum date"
                    ),
                ),
                (
                    "notes",
                    models.CharField(
                        max_length=500, unique=True, verbose_name="Additional notes"
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.person",
                        verbose_name="Author",
                    ),
                ),
                (
                    "place",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.place",
                        verbose_name="Creation place",
                    ),
                ),
            ],
            options={
                "verbose_name": "Work",
                "verbose_name_plural": "Work",
            },
        ),
        migrations.CreateModel(
            name="Witness",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ms", "Manuscript"),
                            ("tpr", "Letterpress print"),
                            ("wpr", "Woodblock print"),
                        ],
                        max_length=150,
                        verbose_name="Type",
                    ),
                ),
                (
                    "id_nb",
                    models.CharField(
                        max_length=150, verbose_name="Identification number"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        max_length=1000, unique=True, verbose_name="Additional notes"
                    ),
                ),
                (
                    "nb_pages",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Number of pages/folios"
                    ),
                ),
                (
                    "is_paginated",
                    models.BooleanField(
                        default=True,
                        help_text="<i class='fa-solid fa-page' None></i> Is the witness paginated (leave checked) or folioed (uncheck)?",
                        verbose_name="Paginated?",
                    ),
                ),
                (
                    "is_validated",
                    models.BooleanField(
                        default=False,
                        help_text="<i class='fa-solid fa-triangle-exclamation' style='color: #efb80b'></i> Annotations will no longer be editable",
                        verbose_name="Validate annotations",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="<i class='fa-solid fa-triangle-exclamation' None></i> Record details will be accessible to other users of the database",
                        verbose_name="Make it public",
                    ),
                ),
                (
                    "link",
                    models.URLField(
                        blank=True, verbose_name="External link (online catalog, etc.)"
                    ),
                ),
                ("slug", models.SlugField(max_length=600)),
                (
                    "title",
                    models.CharField(
                        max_length=600, verbose_name="Title of the volume"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "place",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.conservationplace",
                        verbose_name="Conservation place",
                    ),
                ),
                (
                    "series",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.series",
                        verbose_name="Series",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "volume",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.volume",
                        verbose_name="Volume",
                    ),
                ),
            ],
            options={
                "verbose_name": "Witness",
                "verbose_name_plural": "Witness",
                "ordering": ["-place"],
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("pub", "Publisher"),
                            ("aut", "Author"),
                            ("ill", "Illuminator"),
                            ("sel", "Bookseller"),
                        ],
                        max_length=150,
                        verbose_name="Role",
                    ),
                ),
                (
                    "content",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.content",
                        verbose_name="Content",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.person",
                        verbose_name="Historical actor",
                    ),
                ),
                (
                    "series",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.series",
                        verbose_name="Series",
                    ),
                ),
            ],
            options={
                "verbose_name": "Role",
                "verbose_name_plural": "Role",
            },
        ),
        migrations.AddField(
            model_name="edition",
            name="place",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="webapp.place",
                verbose_name="Publication place",
            ),
        ),
        migrations.AddField(
            model_name="edition",
            name="publisher",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="webapp.person",
                verbose_name="Publisher",
            ),
        ),
        migrations.CreateModel(
            name="Digitization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "digit_type",
                    models.CharField(
                        choices=[("img", "Image"), ("pdf", "Pdf"), ("man", "Manifest")],
                        max_length=150,
                        verbose_name="Type",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        help_text="Envoyez des images jusqu'√† 2 Go.",
                        upload_to=functools.partial(
                            app.webapp.models.digitization.rename_file, *(), **{}
                        ),
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["jpg", "jpeg", "png", "tif"]
                            )
                        ],
                        verbose_name="image",
                    ),
                ),
                (
                    "pdf",
                    models.FileField(
                        upload_to=functools.partial(
                            app.webapp.models.digitization.rename_file, *(), **{}
                        ),
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["pdf"]
                            )
                        ],
                        verbose_name="PDF",
                    ),
                ),
                (
                    "manifest",
                    models.URLField(
                        help_text="<div class='tooltip'>\n                 <i class='fa-solid fa-circle-info' title='Manifest'></i>\n                 <span class='tooltiptext'>A IIIF manifest is the package that contains all the information related\n                 to a particular digital object, including the image itself as well as the metadata.</span>\n             </div>\n             E.g.: <a href='https://gallica.bnf.fr/iiif/ark:/12148/btv1b60004321/manifest.json' target='_blank'>\n             https://gallica.bnf.fr/iiif/ark:/12148/btv1b60004321/manifest.json</a>",
                        validators=[app.webapp.utils.iiif.validation.validate_manifest],
                        verbose_name="manifest",
                    ),
                ),
                (
                    "witness",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="webapp.witness"
                    ),
                ),
            ],
            options={
                "verbose_name": "Digitization",
                "verbose_name_plural": "Digitization",
            },
        ),
        migrations.AddField(
            model_name="content",
            name="lang",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="webapp.language",
                verbose_name="Language",
            ),
        ),
        migrations.AddField(
            model_name="content",
            name="place",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="webapp.place",
                verbose_name="Creation place",
            ),
        ),
        migrations.AddField(
            model_name="content",
            name="tags",
            field=models.ManyToManyField(to="webapp.tag", verbose_name="Tag"),
        ),
        migrations.AddField(
            model_name="content",
            name="witness",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="contents",
                to="webapp.witness",
                verbose_name="Witness",
            ),
        ),
        migrations.AddField(
            model_name="content",
            name="work",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="webapp.work",
                verbose_name="Work",
            ),
        ),
        migrations.AddField(
            model_name="conservationplace",
            name="city",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="webapp.place",
                verbose_name="City",
            ),
        ),
        migrations.RunPython(populate_languages),
    ]
